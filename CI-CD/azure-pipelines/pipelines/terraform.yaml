trigger:
  - master
pool: 
  vmImage: 'ubuntu-latest'
parameters:
  - name: environmentName
    type: string
    default: dev
    values:
      - dev
      - prod
stages: 
- stage: Initialize
  displayName: Terraform initialization
  jobs:
  - job: "install"
    steps:
    - task: TerraformInstaller@0
      displayName: install terraform
      inputs:
        terraformVersion: '1.3.7'
  - job: "init"
    dependsOn: install
    steps:
    - task: TerraformTaskV3@3
      displayName: Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(subscription_id)'
        backendAzureRmResourceGroupName: '$(resource_group_name)'
        backendAzureRmStorageAccountName: '$(storage_account_name)'
        backendAzureRmContainerName: '$(container_name)'
        backendAzureRmKey: '$(key)'
    - task: TerraformTaskV3@3
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: '$(subscription_id)'



- stage: Validation
  displayName: ManualValidation
  dependsOn: Initialize
  condition: succeeded()
  jobs: 
  - deployment: validate
    environment: ${{ environmentName }}
    pool: server
    strategy:
      runOnce:
        deploy: 
          steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              notifyUsers: |
                test@test.com
                example@example.com
              instructions: 'Please validate the build configuration and resume'
              onTimeout: 'reject'
- stage: apply
  dependsOn: Validation
  displayName: Apply
  jobs:
  - job: "apply"
    steps:
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(subscription_id)'
        backendAzureRmResourceGroupName: '$(resource_group_name)'
        backendAzureRmStorageAccountName: '$(storage_account_name)'
        backendAzureRmContainerName: '$(container_name)'
        backendAzureRmKey: '$(key)'    
    - task: TerraformTaskV3@3
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: '$(subscription_id)'